import { NodePlopAPI } from 'plop';
import { config } from '../../config/config.js';
import { httpsRequest } from '../../utils/https-request.js';
import { toKebabCase } from '../../utils/to-kebab-case.js';
import { writeDataToFile } from '../../utils/write-data-to-file.js';

const api = config.get('api');
const apiKey = config.get('apiKey');

export const createAiSchemaViaApi = (plop: NodePlopAPI) => {
  return plop.setActionType('create ai schema', async (answers, config) => {
    const { useCaseSchemaValues, useCaseSchemaName, cdkFolderPath, name } =
      config.data as any;

    // create the prompt specific to schemas using the dynamic input from the user
    const prompt = {
      type: 'json',
      contentType: 'application/json',
      accept: 'application/json',
      prompt: `Please return a json schema with only the following properties: ${useCaseSchemaValues}, with all properties having relevant regex patterns`,
      temperature: 0,
      top_p: 0.8,
      top_k: 5,
      max_tokens_to_sample: 400,
      stop_sequences: [],
    };

    console.log(`ðŸ¤– dyamically generating the schema using ai...`);

    // make the request and get the autogenerated schema for the file contents
    const response = await httpsRequest(prompt, apiKey, api);

    // use our helper methods to convert values to kebab case for file names
    const nameKebabCase = toKebabCase(name);
    const useCaseNameKebabCase = toKebabCase(useCaseSchemaName);

    // create the primary adapter schema values
    const adapterFolderPath = `../${cdkFolderPath}/stateless/src/adapters/primary/${nameKebabCase}`;
    const adapterFileName = `${nameKebabCase}.schema.ts`;
    const data = `export const schema = ${response.result};`;

    // create the use case schema values
    const useCaseFolderPath = `../${cdkFolderPath}/stateless/src/schemas/${useCaseNameKebabCase}`;
    const useCaseFileName = `${useCaseNameKebabCase}.schema.ts`;

    // write the files to the correct folder
    writeDataToFile(data, adapterFolderPath, adapterFileName);
    writeDataToFile(data, useCaseFolderPath, useCaseFileName);

    return 'ðŸ¤– generated the dynamic schema using ai';
  });
};
