import { NodePlopAPI } from 'plop';
import { config } from '../../config/config.js';
import { httpsRequest } from '../../utils/https-request.js';
import { toKebabCase } from '../../utils/to-kebab-case.js';
import { writeDataToFile } from '../../utils/write-data-to-file.js';

const api = config.get('api');
const apiKey = config.get('apiKey');

export const createAiTypeViaApi = (plop: NodePlopAPI) => {
  return plop.setActionType('create ai type', async (answers, config) => {
    const { useCaseSchemaValues, cdkFolderPath, name } = config.data as any;

    // create the prompt specific to types using the dynamic input from the user
    const prompt = {
      type: 'typescript',
      contentType: 'application/json',
      accept: 'application/json',
      prompt: `Please return a typescript type with only the following properties: ${useCaseSchemaValues}, where the typescript type is named ${name}Dto in pascal case`,
      temperature: 0,
      top_p: 0.8,
      top_k: 5,
      max_tokens_to_sample: 400,
      stop_sequences: [],
    };

    console.log(`ðŸ¤– dyamically generating the type using ai...`);

    // make the request and get the autogenerated type for the file contents
    const response = await httpsRequest(prompt, apiKey, api);

    // use our helper methods to convert values to kebab case for file names
    const nameKebabCase = toKebabCase(name);

    // create the dto type values
    const folderPath = `../${cdkFolderPath}/stateless/src/dto/${nameKebabCase}`;
    const fileName = `${nameKebabCase}.ts`;
    const data = `${JSON.parse(response.result)}`;

    // write the file to the correct folder
    writeDataToFile(data, folderPath, fileName);

    return 'ðŸ¤– generated the dynamic schema using ai';
  });
};
